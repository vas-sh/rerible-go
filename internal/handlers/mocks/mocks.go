// Code generated by MockGen. DO NOT EDIT.
// Source: core.go
//
// Generated by this command:
//
//	mockgen -source=core.go -destination=mocks/mocks.go -package mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/vas-sh/rerible-go/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// Mockreribler is a mock of reribler interface.
type Mockreribler struct {
	ctrl     *gomock.Controller
	recorder *MockreriblerMockRecorder
	isgomock struct{}
}

// MockreriblerMockRecorder is the mock recorder for Mockreribler.
type MockreriblerMockRecorder struct {
	mock *Mockreribler
}

// NewMockreribler creates a new mock instance.
func NewMockreribler(ctrl *gomock.Controller) *Mockreribler {
	mock := &Mockreribler{ctrl: ctrl}
	mock.recorder = &MockreriblerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockreribler) EXPECT() *MockreriblerMockRecorder {
	return m.recorder
}

// Ownership mocks base method.
func (m *Mockreribler) Ownership(ctx context.Context, id string) (*models.Ownership, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ownership", ctx, id)
	ret0, _ := ret[0].(*models.Ownership)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ownership indicates an expected call of Ownership.
func (mr *MockreriblerMockRecorder) Ownership(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ownership", reflect.TypeOf((*Mockreribler)(nil).Ownership), ctx, id)
}

// TraitRarities mocks base method.
func (m *Mockreribler) TraitRarities(ctx context.Context, data models.TraitRarityRequest) (*models.TraitRarityResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TraitRarities", ctx, data)
	ret0, _ := ret[0].(*models.TraitRarityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TraitRarities indicates an expected call of TraitRarities.
func (mr *MockreriblerMockRecorder) TraitRarities(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TraitRarities", reflect.TypeOf((*Mockreribler)(nil).TraitRarities), ctx, data)
}
